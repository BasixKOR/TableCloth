// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TableCloth.SpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AppMessageBoxFeature : object, Xunit.IClassFixture<AppMessageBoxFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AppMessageBox.feature"
#line hidden
        
        public AppMessageBoxFeature(AppMessageBoxFeature.FixtureData fixtureData, TableCloth_SpecFlow_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ko-KR"), "Features", "AppMessageBox", "용도와 목적이 미리 정해진 메시지 박스 컴포넌트입니다.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="a. 정보나 공지 사항을 나타내기 위한 메시지 박스를 띄우려 한다.")]
        [Xunit.TraitAttribute("FeatureTitle", "AppMessageBox")]
        [Xunit.TraitAttribute("Description", "a. 정보나 공지 사항을 나타내기 위한 메시지 박스를 띄우려 한다.")]
        public virtual void A_정보나공지사항을나타내기위한메시지박스를띄우려한다_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a. 정보나 공지 사항을 나타내기 위한 메시지 박스를 띄우려 한다.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "창 제목",
                            "본문"});
                table1.AddRow(new string[] {
                            "식탁보 정보",
                            "이 메시지는 테스트 메시지입니다. 무시하셔도 괜찮습니다."});
#line 8
testRunner.Given("a.a. 다음과 같이 메시지 박스에 나타낼 문자열을 준비한다.", ((string)(null)), table1, "먼저");
#line hidden
#line 11
testRunner.And("a.b. 기능 동작에 필요한 내부 컴포넌트들이 Mockup으로 설정되어 있다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 12
testRunner.And("a.c. 나중에 시스템 메시지 박스의 아이콘이 정보를 나타내는 아이콘으로 표시되었는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 13
testRunner.And("a.d. 나중에 창 제목과 본문이 설정한대로 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 14
testRunner.And("a.e. 나중에 버튼은 확인 버튼만 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 15
testRunner.When("a.f. 정보 표시를 위한 메시지 박스를 띄우는 메서드를 호출하면", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "만일");
#line hidden
#line 16
testRunner.Then("a.g. 의도한 대로 작동했는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그러면");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="b. 오류 메시지를 나타내기 위한 메시지 박스를 띄우려 한다.")]
        [Xunit.TraitAttribute("FeatureTitle", "AppMessageBox")]
        [Xunit.TraitAttribute("Description", "b. 오류 메시지를 나타내기 위한 메시지 박스를 띄우려 한다.")]
        public virtual void B_오류메시지를나타내기위한메시지박스를띄우려한다_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("b. 오류 메시지를 나타내기 위한 메시지 박스를 띄우려 한다.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "수준",
                            "창 제목",
                            "본문"});
                table2.AddRow(new string[] {
                            "일반",
                            "식탁보 경고",
                            "이 메시지는 테스트 메시지입니다. 무시하셔도 괜찮습니다. 심각도: 일반"});
                table2.AddRow(new string[] {
                            "심각",
                            "식탁보 오류",
                            "이 메시지는 테스트 메시지입니다. 무시하셔도 괜찮습니다. 심각도: 심각"});
#line 19
testRunner.Given("b.a. 다음과 같이 메시지 박스에 나타낼 문자열을 준비한다.", ((string)(null)), table2, "먼저");
#line hidden
#line 23
testRunner.And("b.b. 기능 동작에 필요한 내부 컴포넌트들이 Mockup으로 설정되어 있다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 24
testRunner.Then("b.c. 나중에 시스템 메시지 박스의 아이콘이 오류를 나타내는 아이콘으로 표시되었는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그러면");
#line hidden
#line 25
testRunner.And("b.d. 나중에 심각도 수준 지정에 따라 아이콘의 모양이 다르게 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 26
testRunner.And("b.e. 나중에 창 제목과 본문이 설정한대로 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 27
testRunner.And("b.f. 나중에 버튼은 확인 버튼만 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 28
testRunner.When("b.g. 오류 표시를 위한 메시지 박스를 띄우는 메서드를 호출하면", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "만일");
#line hidden
#line 29
testRunner.Then("b.h. 의도한 대로 작동했는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그러면");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="c. 예외가 발생하면 관련된 내용을 나타내기 위한 메시지 박스를 띄우려 한다.")]
        [Xunit.TraitAttribute("FeatureTitle", "AppMessageBox")]
        [Xunit.TraitAttribute("Description", "c. 예외가 발생하면 관련된 내용을 나타내기 위한 메시지 박스를 띄우려 한다.")]
        public virtual void C_예외가발생하면관련된내용을나타내기위한메시지박스를띄우려한다_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("c. 예외가 발생하면 관련된 내용을 나타내기 위한 메시지 박스를 띄우려 한다.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "수준",
                            "창 제목",
                            "본문"});
                table3.AddRow(new string[] {
                            "일반",
                            "식탁보 경고",
                            "이 메시지는 테스트 메시지입니다. 무시하셔도 괜찮습니다. 심각도: 일반"});
                table3.AddRow(new string[] {
                            "심각",
                            "식탁보 오류",
                            "이 메시지는 테스트 메시지입니다. 무시하셔도 괜찮습니다. 심각도: 심각"});
#line 32
testRunner.Given("c.a. 다음과 같이 메시지 박스에 나타낼 문자열을 사용하여 예외 개체를 준비한다.", ((string)(null)), table3, "먼저");
#line hidden
#line 36
testRunner.And("c.b. 기능 동작에 필요한 내부 컴포넌트들이 Mockup으로 설정되어 있다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 37
testRunner.Then("c.c. 나중에 시스템 메시지 박스의 아이콘이 오류를 나타내는 아이콘으로 표시되었는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그러면");
#line hidden
#line 38
testRunner.And("c.d. 나중에 심각도 수준 지정에 따라 아이콘의 모양이 다르게 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 39
testRunner.And("c.e. 나중에 창 제목과 본문이 설정한대로 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 40
testRunner.And("c.f. 나중에 버튼은 확인 버튼만 나타났는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그리고");
#line hidden
#line 41
testRunner.When("c.g. 예외 정보 표시를 위한 메시지 박스를 띄우는 메서드를 호출하면", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "만일");
#line hidden
#line 42
testRunner.Then("c.h. 의도한 대로 작동했는지 확인한다.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "그러면");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AppMessageBoxFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AppMessageBoxFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
